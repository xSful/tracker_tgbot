from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, ReplyKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext, filters
from config import API_TOKEN, cursor, con
from datetime import datetime
import traceback


bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


inline_kb_full = InlineKeyboardMarkup()
status_kb = ReplyKeyboardMarkup()
instruction_btn = InlineKeyboardButton('‚ñ∂Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ PinDuoDuo', callback_data='instruction')
inline_kb_full.row(instruction_btn)
status_kb.add(InlineKeyboardButton('–ù–æ–≤—ã–π', callback_data='btn_new'), InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', callback_data='btn_sent'), InlineKeyboardButton('–ù–∞ —Å–∫–ª–∞–¥–µ', callback_data='btn_arrived'))

# –∫–ª–∞—Å—Å—ã –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserState(StatesGroup):
    name = State()
    package_id = State()

class userInfo(StatesGroup):
    city = State()
    phone_num = State()

class userStatus(StatesGroup):
    packages = State()

class packageStatusArrived(StatesGroup):
    packages = State()

class Broadcast(StatesGroup):
    text = State()

class delPackages(StatesGroup):
    packages_id = State()

# –∫–Ω–æ–ø–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
@dp.callback_query_handler(text='instruction')
async def instruction_button(callback_query: types.CallbackQuery): 
    # –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ gif
    await bot.send_animation(callback_query.from_user.id, 
                             animation='https://techcrunch.com/wp-content/uploads/2014/02/telegram-rise2-2.gif?w=1390&crop=1',
                             caption='‚òùÔ∏è ‚òùÔ∏è ‚òùÔ∏è\n–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å –≤ PinDuoDuo.')

# –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É
@dp.message_handler(commands='add_package')
async def add_package(message: types.Message):
    await message.reply(
"""
‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ù–ê–ó–í–ê–ù–ò–ï –¥–ª—è —Å–≤–æ–µ–π –ø–æ—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ª–µ–≥–∫–æ –µ—ë –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —Å–≤–æ–∏—Ö –ø–æ—Å—ã–ª–æ–∫.\n
‚ÑπÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ä—Ç–∫–∞ Gucci –∏–ª–∏ –î–∏–≤–∞–Ω –¥–ª—è –∑–∞–ª–∞
"""
    )
    await UserState.name.set()

@dp.message_handler(state=UserState.name)
async def get_package_id(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    if data['name'] == '–æ—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await bot.send_message(message.from_user.id, text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    else:
        await message.answer(
f"""üÜó –û—Ç–ª–∏—á–Ω–æ!
–î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—ã–ª–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{data['name']}"\n
#Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥ —Å–≤–æ–µ–π –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å —Å–∞–π—Ç–∞ PinDuoDuo, 1688 –∏–ª–∏ Taobao.\n
‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: CN9320827864–°–¢
"""
        )
        await UserState.package_id.set() 


@dp.message_handler(state=UserState.package_id)
async def finish_creating(message: types.Message, state: FSMContext):
    await state.update_data(package_id=message.text)
    data = await state.get_data()
    await message.reply(
f"""ü•≥ –ö–ª–∞—Å—Å! –ù—É –≤–æ—Ç –∏ –≤—Å—ë!\n\n
‚úÖ –ü–æ—Å—ã–ª–∫–∞ "{data['name']}" —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º {data['package_id']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n
-----------------------------------\n
üîî –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–¥—ë—Ç –∫ –Ω–∞–º –≤ –æ—Ñ–∏—Å –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –∑–¥–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.\n
üöö –ò –ø–æ—Ç–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é –ø–æ—Å—ã–ª–∫—É –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –µ—ë –Ω–∞ —Ä—É–∫–∏.
"""
    )

    now = datetime.now()
    dt_string = (now.strftime("%d/%m/%Y")).replace('/', '.')
    cursor.execute(f'INSERT INTO users (tg_id, package_id, package_name, time, status) VALUES ({message.from_user.id}, "{data["package_id"]}", "{data["name"]}", "{dt_string}", "–ù–æ–≤—ã–π")')
    con.commit()

    await state.finish()
    
    if len((cursor.execute(f'SELECT * FROM users_info WHERE tg_id = {message.from_user.id}')).fetchall()) == 0:
        await bot.send_message(message.from_user.id, text=
"""–°–µ–π—á–∞—Å –º—ã –æ–¥–∏–Ω —Ä–∞–∑ —É–∫–∞–∂–µ–º –≤–∞—à –≥–æ—Ä–æ–¥.\n
üèôÔ∏è –ö–ê–ö–û–ô –£ –í–ê–° –ì–û–†–û–î?
(–ø—Ä–∏–º–µ—Ä: –ê–ª–º–∞—Ç—ã –∏–ª–∏ –ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª, –≥.–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω)
"""
                         )
        await userInfo.city.set()

@dp.message_handler(state=userInfo.city)
async def get_user_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.reply(
"""‚òéÔ∏è –ò –≤–∞—à –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –¥–ª—è —Å–≤—è–∑–∏ –ø–æ WhatsApp:
(–ø—Ä–∏–º–µ—Ä: 8 777 123 45 67)
"""
    )
    await userInfo.phone_num.set()

@dp.message_handler(state=userInfo.phone_num)
async def get_user_city(message: types.Message, state: FSMContext):
    await state.update_data(phone_num=message.text)
    data = await state.get_data()
    await message.reply(
f"""üìÆ –í–´ –£–ö–ê–ó–ê–õ–ò:\n
üèôÔ∏è –≥–æ—Ä–æ–¥: {data["city"]}
‚òéÔ∏è —Ç–µ–ª–µ—Ñ–æ–Ω: {data["phone_num"]}
"""
    )
    cursor.execute(f'INSERT INTO users_info (tg_id, city, phone_number) VALUES ({message.from_user.id}, "{data["city"]}", "{data["phone_num"]}")')
    con.commit()
    await state.finish()


# –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—ã–ª–æ–∫
@dp.message_handler(commands='check_packages')
async def check_packages(message: types.Message):
    await message.reply('üìã –í–°–ï –í–ê–®–ò –ü–û–°–´–õ–ö–ò:')
    packages = cursor.execute(f'SELECT package_id, package_name, status, time, sent_time, arrived_time, weight, price FROM users WHERE tg_id = {message.from_user.id}')
    fet = packages.fetchall()
    if len(fet) == 0:
        await message.reply(
"""üò± –û–π, –∞ —É –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—ã–ª–æ–∫...\n\n
–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ø–æ—Å—ã–ª–∫—É?\n\n
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∞–º –Ω–∞ —Ä—É–∫–∏.""")
    else:
        for i in fet:
            sent = f"\nüìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {i[4]}" if i[4] != None else ""
            arrived = f"\nüìÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {i[5]}" if i[5] != None else ""
            weight = f"\n‚öñÔ∏è –í–µ—Å: {i[6]}" if i[6] != None else ""
            price = f"\nüíµ –¶–µ–Ω–∞: {i[7]}" if i[7] != None else ""
            text = f"üÜî –í–∞—à –∑–∞–∫–∞–∑: {i[1]}\n#Ô∏è‚É£ –¢—Ä–µ–∫-–∫–æ–¥: {i[0]}\nüì¶ –°—Ç–∞—Ç—É—Å: {i[2]}\nüìÖ –°–æ–∑–¥–∞–Ω: {i[3]}" + sent + arrived + weight + price
            await bot.send_message(message.from_user.id, text=text)
    await bot.send_message(message.from_user.id, text='–ü–æ–∫–∞ —ç—Ç–æ –≤—Å—ë üëçüèª')

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
@dp.message_handler(commands='add_pack_info', commands_prefix='/')
async def add_pack_info(message: types.Message):
    if len(message.text.split()) != 4:
        await message.reply('–ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å id –ø–æ—Å—ã–ª–∫–∏, –≤–µ—Å –∏ —Ü–µ–Ω—É.\n–ü—Ä–∏–º–µ—Ä:\n/add_pack_info CT9320827864–°–¢ 2 2000')
    else:
        comment = message.text.split()[1:]
    try:
        cursor.execute(f'UPDATE users SET weight = "{comment[1]}", price = "{comment[2]}" WHERE package_id = "{comment[0]}"')
        con.commit()
        await bot.send_message(message.from_user.id, text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    except Exception as error:
        await bot.send_message(message.from_user.id, text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –ø–æ—Å—ã–ª–∫–µ')
        print(error)


# –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–≤ –ø—É—Ç–∏"
@dp.message_handler(commands='set_status_sent')
async def set_status_sent(message: types.Message):
    await message.reply('–ö–∞–∫–∏–º –ø–æ—Å—ã–ª–∫–∞–º –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–í –ø—É—Ç–∏"?')
    await userStatus.packages.set()

@dp.message_handler(state=userStatus.packages)
async def set_status_sent2(message: types.Message, state: FSMContext):
    await state.update_data(packages=message.text)
    data = await state.get_data()
    for i in (data['packages']).split():
        try:
            now = datetime.now()
            dt_string = (now.strftime("%d/%m/%Y")).replace('/', '.')
            cursor.execute(f'UPDATE users SET status = "–í –ø—É—Ç–∏", sent_time = "{dt_string}" WHERE package_id = "{i}"')
            con.commit()
            users = (cursor.execute(f'SELECT tg_id, package_name FROM users WHERE package_id = "{i}"')).fetchall()
            await bot.send_message(users[0][0], text=f'–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏ {users[0][1]}! –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –ê–ª–º–∞—Ç—ã.')
        except Exception:
            await bot.send_message(message.from_user.id, text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É –ø–æ—Å—ã–ª–∫–∏ {i}, –ø—Ä–æ–≤–µ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞.')
            traceback.print_exc()
    await state.finish()

# –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ü—Ä–∏–±—ã–ª"
@dp.message_handler(commands='set_status_arrived')
async def set_status_arrived(message: types.Message):
    await message.reply('–ö–∞–∫–∏–º –ø–æ—Å—ã–ª–∫–∞–º –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ü—Ä–∏–±—ã–ª"?')
    await packageStatusArrived.packages.set()

@dp.message_handler(state=packageStatusArrived.packages)
async def set_status_arrived2(message: types.Message, state: FSMContext):
    await state.update_data(packages=message.text)
    data = await state.get_data()
    data = (data['packages']).split('\n')
    for i in data:
        i = i.split()
        package_id = i[0]
        weight = " ".join(i[1:3])
        price = " ".join(i[3:])
        try:
            now = datetime.now()
            dt_string = (now.strftime("%d/%m/%Y")).replace('/', '.')
            cursor.execute(f'UPDATE users SET status = "–ü—Ä–∏–±—ã–ª", weight = "{weight}", price = "{price}", arrived_time = "{dt_string}" WHERE package_id = "{package_id}"')
            con.commit()
            users = (cursor.execute(f'SELECT tg_id, package_name FROM users WHERE package_id = "{package_id}"')).fetchall()
            await bot.send_message(users[0][0], text=f'–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏ "{users[0][1]}"! –¢–æ–≤–∞—Ä –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥. –í–µ—Å: {weight}, –¶–µ–Ω–∞: {price}')
        except Exception:
            await bot.send_message(message.from_user.id, text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É –ø–æ—Å—ã–ª–∫–∏ {package_id}, –ø—Ä–æ–≤–µ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞.')
            traceback.print_exc()
    await state.finish()


# –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏ –∏–∑ –±–¥
@dp.message_handler(commands='del_packs')
async def delete_packages_from_db(message: types.Message):
    await message.reply('–ö–∞–∫–∏–µ –ø–æ—Å—ã–ª–∫–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–¥–∞–ª–∏—Ç—å?')
    await delPackages.packages_id.set()

@dp.message_handler(state=delPackages.packages_id)
async def delete_packages_from_db2(message: types.Message, state: FSMContext):
    await state.update_data(packages=message.text)
    data = await state.get_data()
    data = (data['packages']).split('\n')
    for i in data:
        try:
            cursor.execute(f'DELETE FROM users WHERE package_id = "{i}"')
            con.commit()
        except Exception:
            await bot.send_message(message.from_user.id, text=f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—ã–ª–∫—É {i}, –ø—Ä–æ–≤–µ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞.')
            traceback.print_exc()
    await bot.send_message(message.from_user.id, text='–ü–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')
    await state.finish()



# —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands='broadcast', commands_prefix='/')
async def broadcast(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    await Broadcast.text.set()

@dp.message_handler(state=Broadcast.text)
async def broadcast_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await message.reply('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...')
    users = (cursor.execute(f'SELECT tg_id FROM users_info')).fetchall()
    for i in users:
        await bot.send_message(i[0], text=data["text"])
    await state.finish()



@dp.message_handler(commands='start', commands_prefix='/')
async def start(message: types.Message):
    try:
        cursor.execute(f'INSERT INTO users_id (tg_id) VALUES ({message.from_user.id})')
        con.commit()
    except:
        pass
    id = ((cursor.execute(f'SELECT id FROM users_id WHERE tg_id = {message.from_user.id}')).fetchall())[0][0]
    num = [4 - len(str(id)) if len(str(id)) < 5 else 0]
    id = '0'*num[0] + str(id)

    await message.reply(
f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!

–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –≤ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å—ã–ª–æ–∫ –∏–∑ –ö–∏—Ç–∞—è - AliPapa

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –∏–∑ üá®üá≥ –ö–∏—Ç–∞—è –±—ã—Å—Ç—Ä–æ –∏ –Ω–µ–¥–æ—Ä–æ–≥–æ!

ü™ô –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ 1 –∫–≥ 2100 —Ç–≥.
–ú—ã –¥–∞–µ–º —Ç–∞–∫–∏–µ —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–ª–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ PinDuoDuo, 1688 –∏ Taobao.


‚è≥ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ê–ª–º–∞—Ç—ã: 15-18 –¥–Ω–µ–π.""")
    await bot.send_message(
text=f"""
ü™™ –í–ê–® –ê–ö–ö–ê–£–ù–¢ –≤ AliPapa:

üÜî üëâ```Ais-{id}```üëà
(‚òùÔ∏è–Ω–∞–∂–º–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ)


üá®üá≥ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:

‚è∫Ô∏è –¢–ï–õ–ï–§–û–ù –ö–ê–†–ì–û
üëâ```15910292807```üëà
(‚òùÔ∏è–Ω–∞–∂–º–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ)


üè™ –ê–î–†–ï–° –í –ö–ò–¢–ê–ï
üëâ```ÂπøÂ∑ûÂ∏ÇÁôΩ‰∫ëÂå∫ÂêåÂæ∑Ë°óÈÅìË•øÊßéË∑Ø603-613Âè∑Ê∫™Èõ®ÂõΩÈôÖÂπøÂú∫D103Âè∑866Â∫ìÊàø```üëà
(‚òùÔ∏è–Ω–∞–∂–º–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ)

–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Ü–µ - ```87771234567``` (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä) - Aidana (–í–∞—à–µ –∏–º—è)
""", chat_id=message.from_user.id, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb_full
    )
        

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
